# app.py  ‚Äì BrandPulse Lite
import os, time, smtplib
from email.message import EmailMessage

import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np





# --------------------------------------------------
#  Page & sidebar
# --------------------------------------------------
st.set_page_config(page_title="BrandPulse Lite", layout="wide")

with st.sidebar:
    st.header("üìÇ  Upload scored CSV")
    uploaded = st.file_uploader("Choose a file", type="csv")
    st.markdown("- Default uses `data/sentiment_scored.csv`")

@st.cache_data(show_spinner="Loading data ‚Ä¶")
def load_data(src):
    return pd.read_csv(src, parse_dates=["Datetime"])

df = load_data(uploaded if uploaded else "data/sentiment_scored.csv")

# --------------------------------------------------
#  KPI tiles
# --------------------------------------------------
pos_pct = (df.sent_pred == 2).mean() * 100
neg_pct = (df.sent_pred == 0).mean() * 100

st.title("BrandPulse Lite ‚Äî Sentiment dashboard")
c1, c2 = st.columns(2)
c1.metric("üòÄ Positive", f"{pos_pct:0.1f}%")
c2.metric("üò† Negative", f"{neg_pct:0.1f}%")
st.divider()

# --------------------------------------------------
#  Hourly trend
# --------------------------------------------------
hourly = (
    df.set_index("Datetime")
      .groupby(pd.Grouper(freq="h"))
      .sent_pred
      .apply(lambda s: (s == 2).mean()*100)
      .reset_index(name="pct_positive")
)
fig_trend = px.line(hourly, x="Datetime", y="pct_positive",
                    title="% Positive tweets over time",
                    labels={"pct_positive": "% positive"})
st.plotly_chart(fig_trend, use_container_width=True)

# --------------------------------------------------
#  BERTopic negative topics
# --------------------------------------------------
topic_info = pd.read_csv("data/topic_info.csv")
st.subheader("üí¨  Top negative topics (BERTopic)")
st.dataframe(topic_info[["Topic", "Name", "Count"]], hide_index=True)

# --------------------------------------------------
#  SHAP global importance
# --------------------------------------------------
shap_df = pd.read_csv("data/shap_global.csv").nlargest(15, "importance")
st.subheader("üîç  Tokens driving sentiment (SHAP)")
fig_shap = px.bar(shap_df, x="importance", y="token",
                  orientation="h", height=400)
st.plotly_chart(fig_shap, use_container_width=True)

# --------------------------------------------------
#  Live-feed simulation with e-mail alert
# --------------------------------------------------
st.divider()
st.subheader("üîÑ  Live sentiment simulation")
placeholder = st.empty()

ALERT_THRESHOLD = 5    # TODO: % negative that triggers alert
ALERT_STREAK    = 3     # consecutive samples required

def sample_metrics(source_df, n=100):
    sample = source_df.sample(n, replace=False, random_state=int(time.time()))
    pos = (sample.sent_pred == 2).mean()*100
    neg = (sample.sent_pred == 0).mean()*100
    return pos, neg

if st.button("Start live simulation"):
    bad_streak = 0
    while True:
        pos_live, neg_live = sample_metrics(df, 100)
        with placeholder.container():
            c1, c2 = st.columns(2)
            c1.metric("üòÄ Positive (sample)", f"{pos_live:0.1f}%")
            c2.metric("üò† Negative (sample)", f"{neg_live:0.1f}%")

        bad_streak = bad_streak + 1 if neg_live > ALERT_THRESHOLD else 0
        if bad_streak >= ALERT_STREAK:
            msg = (f"üö®  Negativity {neg_live:0.1f}% for "
                   f"{ALERT_STREAK} samples!")
            st.toast(msg, icon="‚ö†Ô∏è")
            email_alert(msg)     # <-- push e-mail
            bad_streak = 0
        time.sleep(30)

st.caption("BERTopic & SHAP files generated by run_model.py + topic_negative.py")
